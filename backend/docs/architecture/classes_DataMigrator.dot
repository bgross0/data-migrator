digraph "classes_DataMigrator" {
rankdir=BT
charset="utf-8"
"field_mapper.matching.base_strategy.BaseStrategy" [color="black", fontcolor="black", label=<{BaseStrategy|name : str<br ALIGN="LEFT"/>weight : float<br ALIGN="LEFT"/>|create_mapping(field: FieldDefinition, confidence: float, rationale: str, scores: dict, source_column: str): FieldMapping<br ALIGN="LEFT"/>filter_by_confidence(mappings: List[FieldMapping], min_confidence: float): List[FieldMapping]<br ALIGN="LEFT"/><I>match</I>(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>sort_by_confidence(mappings: List[FieldMapping], descending: bool): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.business_context_analyzer.BusinessContextAnalyzer" [color="black", fontcolor="black", label=<{BusinessContextAnalyzer|DOMAIN_SIGNATURES : list<br ALIGN="LEFT"/>|analyze_context(column_profiles: List[ColumnProfile], top_n: int): Dict[str, float]<br ALIGN="LEFT"/>detect_primary_domain(column_profiles: List[ColumnProfile]): Optional[str]<br ALIGN="LEFT"/>get_recommended_models(column_profiles: List[ColumnProfile], max_models: int): List[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.cell_data_analyzer.CellDataAnalyzer" [color="black", fontcolor="black", label=<{CellDataAnalyzer|COMPANY_SUFFIXES : set<br ALIGN="LEFT"/>COUNTRIES : set<br ALIGN="LEFT"/>INDUSTRIES : set<br ALIGN="LEFT"/>ODOO_STATES : dict<br ALIGN="LEFT"/>PERSON_TITLES : set<br ALIGN="LEFT"/>REFERENCE_PATTERNS : dict<br ALIGN="LEFT"/>compiled_patterns : dict<br ALIGN="LEFT"/>|analyze_column(column_profile: ColumnProfile): ValueAnalysis<br ALIGN="LEFT"/>suggest_field_mappings(column_profile: ColumnProfile, available_models: Set[str]): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.ColumnProfile" [color="black", fontcolor="black", label=<{ColumnProfile|avg_length : Optional[float]<br ALIGN="LEFT"/>column_name : str<br ALIGN="LEFT"/>data_type : str<br ALIGN="LEFT"/>date_format : Optional[str]<br ALIGN="LEFT"/>max_length : Optional[int]<br ALIGN="LEFT"/>max_value : Optional[float]<br ALIGN="LEFT"/>min_length : Optional[int]<br ALIGN="LEFT"/>min_value : Optional[float]<br ALIGN="LEFT"/>non_null_count : int<br ALIGN="LEFT"/>null_percentage : float<br ALIGN="LEFT"/>number_format : Optional[str]<br ALIGN="LEFT"/>patterns : Dict[str, float]<br ALIGN="LEFT"/>sample_values : List[Any]<br ALIGN="LEFT"/>sheet_name : str<br ALIGN="LEFT"/>total_rows : int<br ALIGN="LEFT"/>unique_count : int<br ALIGN="LEFT"/>uniqueness_ratio : float<br ALIGN="LEFT"/>value_frequencies : Dict[Any, int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.profiling.column_profiler.ColumnProfiler" [color="black", fontcolor="black", label=<{ColumnProfiler|PATTERNS : dict<br ALIGN="LEFT"/>sample_size : int<br ALIGN="LEFT"/>|get_profile_summary(profile: ColumnProfile): str<br ALIGN="LEFT"/>profile_column(column_name: str, data: pl.Series, sheet_name: str): ColumnProfile<br ALIGN="LEFT"/>profile_dataframe(df: pl.DataFrame, sheet_name: str): List[ColumnProfile]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"core.profiler.ColumnProfiler" [color="black", fontcolor="black", label=<{ColumnProfiler|file_path : Path<br ALIGN="LEFT"/>|detect_dtype(series: pl.Series): str<br ALIGN="LEFT"/>detect_patterns(series: pl.Series): Dict[str, float]<br ALIGN="LEFT"/>profile(): Dict[str, List[Dict[str, Any]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.compound_name_parser.CompoundNameParser" [color="black", fontcolor="black", label=<{CompoundNameParser|ENTITY_MODEL_MAP : dict<br ALIGN="LEFT"/>FIELD_ALIASES : dict<br ALIGN="LEFT"/>|extract_all_hints(column_name: str): Dict[str, any]<br ALIGN="LEFT"/>get_field_aliases(field_name: str): list<br ALIGN="LEFT"/>get_model_for_entity(entity_name: str): Optional[str]<br ALIGN="LEFT"/>parse_compound_name(column_name: str): Tuple[Optional[str], str, Optional[str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.config.settings.FieldMapperSettings.Config" [color="black", fontcolor="black", label=<{Config|case_sensitive : bool<br ALIGN="LEFT"/>env_prefix : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.core.data_structures.ConstraintDefinition" [color="black", fontcolor="black", label=<{ConstraintDefinition|definition : str<br ALIGN="LEFT"/>fields : List[str]<br ALIGN="LEFT"/>model : str<br ALIGN="LEFT"/>module : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.loaders.excel_loaders.ConstraintLoader" [color="black", fontcolor="black", label=<{ConstraintLoader|file_path : Path<br ALIGN="LEFT"/>|load(): List[ConstraintDefinition]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.strategies.contextual_match.ContextualMatchStrategy" [color="black", fontcolor="black", label=<{ContextualMatchStrategy|<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.DataTransformation" [color="black", fontcolor="black", label=<{DataTransformation|description : str<br ALIGN="LEFT"/>source_columns : List[str]<br ALIGN="LEFT"/>target_field : str<br ALIGN="LEFT"/>transformation_rule : str<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.matching.strategies.data_type_compatibility.DataTypeCompatibilityStrategy" [color="black", fontcolor="black", label=<{DataTypeCompatibilityStrategy|TYPE_COMPATIBILITY : Dict[str, Set[str]]<br ALIGN="LEFT"/>weight : float<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.dataset_service.DatasetService" [color="black", fontcolor="black", label=<{DatasetService|db<br ALIGN="LEFT"/>|create_from_upload(file: UploadFile, name: str): Tuple[Dataset, str]<br ALIGN="LEFT"/>delete_dataset(dataset_id: int): bool<br ALIGN="LEFT"/>get_dataset(dataset_id: int)<br ALIGN="LEFT"/>list_datasets(skip: int, limit: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.main.DeterministicFieldMapper" [color="black", fontcolor="black", label=<{DeterministicFieldMapper|dictionary_path : Path<br ALIGN="LEFT"/>knowledge_base<br ALIGN="LEFT"/>pipeline<br ALIGN="LEFT"/>profiler<br ALIGN="LEFT"/>settings<br ALIGN="LEFT"/>|get_field_suggestions(column_name: str, sample_values: List, data_type: str, max_suggestions: int): List[FieldMapping]<br ALIGN="LEFT"/>get_statistics(): Dict<br ALIGN="LEFT"/>map_dataframe(df: pl.DataFrame, sheet_name: str, selected_modules: Optional[List[str]]): Dict[str, List[FieldMapping]]<br ALIGN="LEFT"/>map_file(file_path: Union[str, Path], sheet_name: Optional[str]): MappingResult<br ALIGN="LEFT"/>reload_knowledge_base(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.business_context_analyzer.DomainSignature" [color="black", fontcolor="black", label=<{DomainSignature|confidence_threshold : float<br ALIGN="LEFT"/>models : List[str]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>optional_columns : Set[str]<br ALIGN="LEFT"/>required_columns : Set[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"core.transformer_enhanced.EnhancedTransformRegistry" [color="black", fontcolor="black", label=<{EnhancedTransformRegistry|transforms : Dict[str, Callable]<br ALIGN="LEFT"/>|concat(): str<br ALIGN="LEFT"/>currency_to_float(value: Any, currency_symbol: str): float<br ALIGN="LEFT"/>email_normalize(value: Any): str<br ALIGN="LEFT"/>email_validate(value: Any): bool<br ALIGN="LEFT"/>get(name: str): Callable<br ALIGN="LEFT"/>lower(value: Any): str<br ALIGN="LEFT"/>name_normalize(value: Any): str<br ALIGN="LEFT"/>phone_normalize(value: Any, region: str): str<br ALIGN="LEFT"/>regex_extract(value: Any, pattern: str, group: int): str<br ALIGN="LEFT"/>split_name(value: Any): Dict[str, str]<br ALIGN="LEFT"/>titlecase(value: Any): str<br ALIGN="LEFT"/>trim(value: Any): str<br ALIGN="LEFT"/>upper(value: Any): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.strategies.exact_name_match.ExactNameMatchStrategy" [color="black", fontcolor="black", label=<{ExactNameMatchStrategy|parser<br ALIGN="LEFT"/>weight : float<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.FieldDefinition" [color="black", fontcolor="black", label=<{FieldDefinition|base_type : str<br ALIGN="LEFT"/>domain : Optional[str]<br ALIGN="LEFT"/>field_type : str<br ALIGN="LEFT"/>help_text : Optional[str]<br ALIGN="LEFT"/>is_indexed : bool<br ALIGN="LEFT"/>is_readonly : bool<br ALIGN="LEFT"/>is_required : bool<br ALIGN="LEFT"/>is_stored : bool<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>model : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>related_model : Optional[str]<br ALIGN="LEFT"/>selection_values : List[str]<br ALIGN="LEFT"/>size : Optional[int]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.loaders.excel_loaders.FieldLoader" [color="black", fontcolor="black", label=<{FieldLoader|file_path : Path<br ALIGN="LEFT"/>|load(): List[FieldDefinition]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.config.settings.FieldMapperSettings" [color="black", fontcolor="black", label=<{FieldMapperSettings|cache_enabled : bool<br ALIGN="LEFT"/>cache_size : int<br ALIGN="LEFT"/>cache_ttl_seconds : int<br ALIGN="LEFT"/>confidence_threshold : float<br ALIGN="LEFT"/>contextual_weight : float<br ALIGN="LEFT"/>data_type_weight : float<br ALIGN="LEFT"/>enable_performance_monitoring : bool<br ALIGN="LEFT"/>enable_rate_limiting : bool<br ALIGN="LEFT"/>exact_match_weight : float<br ALIGN="LEFT"/>fuzzy_match_weight : float<br ALIGN="LEFT"/>high_confidence_threshold : float<br ALIGN="LEFT"/>history_db_path : str<br ALIGN="LEFT"/>label_match_weight : float<br ALIGN="LEFT"/>log_level : str<br ALIGN="LEFT"/>match_timeout_ms : float<br ALIGN="LEFT"/>max_suggestions : int<br ALIGN="LEFT"/>max_workers : int<br ALIGN="LEFT"/>odoo_dictionary_path : str<br ALIGN="LEFT"/>pattern_match_weight : float<br ALIGN="LEFT"/>performance_alert_threshold_ms : float<br ALIGN="LEFT"/>rate_limit_calls : int<br ALIGN="LEFT"/>rate_limit_period : int<br ALIGN="LEFT"/>sample_size : int<br ALIGN="LEFT"/>selection_value_weight : float<br ALIGN="LEFT"/>statistical_weight : float<br ALIGN="LEFT"/>timeout_seconds : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.core.data_structures.FieldMapping" [color="black", fontcolor="black", label=<{FieldMapping|alternatives : List['FieldMapping']<br ALIGN="LEFT"/>confidence : float<br ALIGN="LEFT"/>constraint_violations : List[str]<br ALIGN="LEFT"/>data_type : Optional[str]<br ALIGN="LEFT"/>lambda_dependencies : List[str]<br ALIGN="LEFT"/>lambda_function : Optional[str]<br ALIGN="LEFT"/>mapping_type : str<br ALIGN="LEFT"/>matching_strategy : str<br ALIGN="LEFT"/>rationale : str<br ALIGN="LEFT"/>scores : Dict[str, float]<br ALIGN="LEFT"/>source_column : str<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>target_field : Optional[str]<br ALIGN="LEFT"/>target_model : str<br ALIGN="LEFT"/>transformations : List[DataTransformation]<br ALIGN="LEFT"/>warnings : List[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"core.field_detector.FieldTypeDetector" [color="black", fontcolor="black", label=<{FieldTypeDetector|DTYPE_TO_ODOO : dict<br ALIGN="LEFT"/>|detect_field_type(dtype_guess: str, patterns: Dict[str, float], null_pct: float, distinct_pct: float, sample_values: List[str]): Dict[str, Any]<br ALIGN="LEFT"/>generate_technical_name(header_name: str, prefix: str): str<br ALIGN="LEFT"/>suggest_field_label(header_name: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.strategies.fuzzy_match.FuzzyMatchStrategy" [color="black", fontcolor="black", label=<{FuzzyMatchStrategy|min_similarity : float<br ALIGN="LEFT"/>|get_close_matches(word: str, possibilities: List[str], n: int, cutoff: float): List[tuple]<br ALIGN="LEFT"/>match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"core.matcher.HeaderMatcher" [color="black", fontcolor="black", label=<{HeaderMatcher|column_names : list<br ALIGN="LEFT"/>target_model : Optional[str]<br ALIGN="LEFT"/>|match(header: str, sheet_name: Optional[str], column_names: Optional[List[str]], selected_modules: Optional[List[str]]): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"core.hybrid_matcher.HybridMatcher" [color="black", fontcolor="black", label=<{HybridMatcher|business_analyzer : BusinessContextAnalyzer<br ALIGN="LEFT"/>knowledge_base : NoneType, OdooKnowledgeBase<br ALIGN="LEFT"/>patterns : dict<br ALIGN="LEFT"/>|match(header: str, sheet_name: Optional[str], column_names: Optional[List[str]], selected_modules: Optional[List[str]]): List[Dict[str, Any]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.import_service.ImportService" [color="black", fontcolor="black", label=<{ImportService|db<br ALIGN="LEFT"/>lambda_transformer : LambdaTransformer<br ALIGN="LEFT"/>|create_run(dataset_id: int, run_data: RunCreate)<br ALIGN="LEFT"/>execute_import(dataset_id: int, odoo: OdooConnector, dry_run: bool): Run<br ALIGN="LEFT"/>get_run(run_id: int)<br ALIGN="LEFT"/>list_runs(skip: int, limit: int)<br ALIGN="LEFT"/>rollback_run(run_id: int): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.strategies.label_match.LabelMatchStrategy" [color="black", fontcolor="black", label=<{LabelMatchStrategy|weight : float<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"core.lambda_transformer.LambdaTransformer" [color="black", fontcolor="black", label=<{LambdaTransformer|context : dict<br ALIGN="LEFT"/>|apply_field_mappings(data: pl.DataFrame, field_mappings: Dict[str, Dict[str, Any]]): pl.DataFrame<br ALIGN="LEFT"/>apply_lambda_mapping(data: pl.DataFrame, target_field: str, lambda_func: Any, data_type: Optional[str]): pl.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.executor.mapping_executor.MappingExecutor" [color="black", fontcolor="black", label=<{MappingExecutor|knowledge_base<br ALIGN="LEFT"/>lambda_transformer : LambdaTransformer<br ALIGN="LEFT"/>|execute_by_model(df: pl.DataFrame, mappings: Dict[str, List[FieldMapping]]): Dict[str, pl.DataFrame]<br ALIGN="LEFT"/>execute_mappings(df: pl.DataFrame, mappings: Dict[str, List[FieldMapping]], target_model: Optional[str]): pl.DataFrame<br ALIGN="LEFT"/>generate_odoo_import_csv(df: pl.DataFrame, model_name: str, output_path: str): None<br ALIGN="LEFT"/>generate_odoo_import_dict(df: pl.DataFrame, model_name: str): List[Dict[str, Any]]<br ALIGN="LEFT"/>validate_mappings(df: pl.DataFrame, mappings: Dict[str, List[FieldMapping]]): List[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.MappingResult" [color="black", fontcolor="black", label=<{MappingResult|created_at : datetime<br ALIGN="LEFT"/>dataset_name : str<br ALIGN="LEFT"/>mappings : List[FieldMapping]<br ALIGN="LEFT"/>overall_confidence : float<br ALIGN="LEFT"/>primary_model : Optional[str]<br ALIGN="LEFT"/>sheet_mappings : Dict[str, Dict[str, List[FieldMapping]]]<br ALIGN="LEFT"/>warnings : List[str]<br ALIGN="LEFT"/>|add_mapping(sheet_name: str, column_name: str, mappings: List[FieldMapping])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.mapping_service.MappingService" [color="black", fontcolor="black", label=<{MappingService|db<br ALIGN="LEFT"/>deterministic_mapper : DeterministicFieldMapper, NoneType<br ALIGN="LEFT"/>hybrid_matcher : HybridMatcher, NoneType<br ALIGN="LEFT"/>lambda_transformer : LambdaTransformer<br ALIGN="LEFT"/>|create_lambda_mapping(dataset_id: int, sheet_id: int, target_field: str, lambda_function: str, target_model: str): Mapping<br ALIGN="LEFT"/>delete_mapping(mapping_id: int): bool<br ALIGN="LEFT"/>generate_mappings(dataset_id: int)<br ALIGN="LEFT"/>generate_mappings_hybrid(dataset_id: int)<br ALIGN="LEFT"/>generate_mappings_v2(dataset_id: int, use_deterministic: bool)<br ALIGN="LEFT"/>get_mappings_for_dataset(dataset_id: int)<br ALIGN="LEFT"/>update_mapping(mapping_id: int, mapping_data: MappingUpdate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.MappingStatus" [color="black", fontcolor="black", label=<{MappingStatus|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.matching.matching_context.MatchingContext" [color="black", fontcolor="black", label=<{MatchingContext|all_column_profiles : List[ColumnProfile]<br ALIGN="LEFT"/>candidate_models : Optional[Set[str]]<br ALIGN="LEFT"/>column_profile<br ALIGN="LEFT"/>knowledge_base<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>sheet_name : str<br ALIGN="LEFT"/>target_models : Optional[Set[str]]<br ALIGN="LEFT"/>|filter_by_models(model_names: Set[str]): 'MatchingContext'<br ALIGN="LEFT"/>get_candidate_fields(): List[FieldDefinition]<br ALIGN="LEFT"/>get_model_definitions(model_names: Set[str]): List[ModelDefinition]<br ALIGN="LEFT"/>get_related_models(model_name: str, max_depth: int): Set[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.MatchingContext" [color="black", fontcolor="black", label=<{MatchingContext|column_group : List[str]<br ALIGN="LEFT"/>confirmed_mappings : Dict[str, FieldMapping]<br ALIGN="LEFT"/>dataset_metadata : Dict[str, Any]<br ALIGN="LEFT"/>identified_model : Optional[str]<br ALIGN="LEFT"/>sheet_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.matching.matching_pipeline.MatchingPipeline" [color="black", fontcolor="black", label=<{MatchingPipeline|business_analyzer<br ALIGN="LEFT"/>cell_analyzer<br ALIGN="LEFT"/>knowledge_base<br ALIGN="LEFT"/>settings<br ALIGN="LEFT"/>strategies : List[BaseStrategy]<br ALIGN="LEFT"/>|disable_strategy(name: str): bool<br ALIGN="LEFT"/>enable_strategy(name: str): bool<br ALIGN="LEFT"/>get_statistics(): Dict[str, int]<br ALIGN="LEFT"/>get_strategy_by_name(name: str): Optional[BaseStrategy]<br ALIGN="LEFT"/>match_column(column_profile: ColumnProfile, all_column_profiles: List[ColumnProfile], target_models: Optional[Set[str]], candidate_models: Optional[Set[str]], max_results: int): List[FieldMapping]<br ALIGN="LEFT"/>match_sheet(column_profiles: List[ColumnProfile], sheet_name: str, selected_modules: Optional[List[str]]): Dict[str, List[FieldMapping]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.ModelDefinition" [color="black", fontcolor="black", label=<{ModelDefinition|child_models : List[str]<br ALIGN="LEFT"/>description : str<br ALIGN="LEFT"/>field_ids : List[str]<br ALIGN="LEFT"/>is_transient : bool<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>parent_models : List[str]<br ALIGN="LEFT"/>type : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.loaders.excel_loaders.ModelLoader" [color="black", fontcolor="black", label=<{ModelLoader|file_path : Path<br ALIGN="LEFT"/>|load(): List[ModelDefinition]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.module_registry.ModuleGroup" [color="black", fontcolor="black", label=<{ModuleGroup|description : str<br ALIGN="LEFT"/>display_name : str<br ALIGN="LEFT"/>icon : str<br ALIGN="LEFT"/>models : List[str]<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>priority : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"services.addon_generator.OdooAddonGenerator" [color="black", fontcolor="black", label=<{OdooAddonGenerator|db<br ALIGN="LEFT"/>|generate_addon(dataset_id: int, addon_name: str): BytesIO<br ALIGN="LEFT"/>get_installation_instructions(addon_name: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.loaders.excel_loaders.OdooDictionaryLoader" [color="black", fontcolor="black", label=<{OdooDictionaryLoader|constraints_file<br ALIGN="LEFT"/>dictionary_path : Path<br ALIGN="LEFT"/>fields_file<br ALIGN="LEFT"/>models_file<br ALIGN="LEFT"/>relations_file<br ALIGN="LEFT"/>selections_file<br ALIGN="LEFT"/>|load_all(): Dict[str, List]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.odoo_field_service.OdooFieldService" [color="black", fontcolor="black", label=<{OdooFieldService|FIELD_TYPE_MAPPING : dict<br ALIGN="LEFT"/>db<br ALIGN="LEFT"/>|create_custom_fields_for_dataset(dataset_id: int, odoo_connector: OdooConnector): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.knowledge_base.OdooKnowledgeBase" [color="black", fontcolor="black", label=<{OdooKnowledgeBase|constraints : Dict[str, List[ConstraintDefinition]]<br ALIGN="LEFT"/>dictionary_path : Optional[Path]<br ALIGN="LEFT"/>field_label_index : Dict[str, List[Tuple[str, str]]]<br ALIGN="LEFT"/>field_label_trie : CharTrie<br ALIGN="LEFT"/>field_name_index : Dict[str, List[Tuple[str, str]]]<br ALIGN="LEFT"/>field_name_trie : CharTrie<br ALIGN="LEFT"/>field_type_index : Dict[str, List[Tuple[str, str]]]<br ALIGN="LEFT"/>fields : Dict[Tuple[str, str], FieldDefinition]<br ALIGN="LEFT"/>is_loaded : bool<br ALIGN="LEFT"/>load_timestamp : Optional[str]<br ALIGN="LEFT"/>model_graph : DiGraph<br ALIGN="LEFT"/>models : Dict[str, ModelDefinition]<br ALIGN="LEFT"/>related_model_index : Dict[str, List[Tuple[str, str]]]<br ALIGN="LEFT"/>relations : Dict[str, List[RelationDefinition]]<br ALIGN="LEFT"/>selection_value_index : Dict[str, List[Tuple[str, str]]]<br ALIGN="LEFT"/>selections : Dict[Tuple[str, str], List[SelectionOption]]<br ALIGN="LEFT"/>statistics : Dict[str, int]<br ALIGN="LEFT"/>|add_constraint(constraint: ConstraintDefinition): None<br ALIGN="LEFT"/>add_field(field: FieldDefinition): None<br ALIGN="LEFT"/>add_model(model: ModelDefinition): None<br ALIGN="LEFT"/>add_relation(relation: RelationDefinition): None<br ALIGN="LEFT"/>add_selection(model_name: str, field_name: str, selection: SelectionOption): None<br ALIGN="LEFT"/>build_indexes(): None<br ALIGN="LEFT"/>build_model_graph(): None<br ALIGN="LEFT"/>field_exists(model_name: str, field_name: str): bool<br ALIGN="LEFT"/>get_all_models(): List[ModelDefinition]<br ALIGN="LEFT"/>get_constraints(model_name: str): List[ConstraintDefinition]<br ALIGN="LEFT"/>get_field(model_name: str, field_name: str): Optional[FieldDefinition]<br ALIGN="LEFT"/>get_model(model_name: str): Optional[ModelDefinition]<br ALIGN="LEFT"/>get_model_fields(model_name: str): List[FieldDefinition]<br ALIGN="LEFT"/>get_path_between_models(source_model: str, target_model: str): Optional[List[str]]<br ALIGN="LEFT"/>get_related_models(model_name: str, max_depth: int): Set[str]<br ALIGN="LEFT"/>get_relation(relation_name: str): List[RelationDefinition]<br ALIGN="LEFT"/>get_required_fields(model_name: str): List[str]<br ALIGN="LEFT"/>get_selection_values(model_name: str, field_name: str): List[str]<br ALIGN="LEFT"/>get_selections(model_name: str, field_name: str): List[SelectionOption]<br ALIGN="LEFT"/>get_statistics(): Dict[str, int]<br ALIGN="LEFT"/>get_unique_constraints(model_name: str): List[ConstraintDefinition]<br ALIGN="LEFT"/>load_from_dictionary(force_reload: bool): None<br ALIGN="LEFT"/>lookup_by_field_name(field_name: str): List[Tuple[str, str]]<br ALIGN="LEFT"/>lookup_by_label(label: str): List[Tuple[str, str]]<br ALIGN="LEFT"/>lookup_by_selection_value(value: str): List[Tuple[str, str]]<br ALIGN="LEFT"/>lookup_by_type(field_type: str): List[Tuple[str, str]]<br ALIGN="LEFT"/>model_exists(model_name: str): bool<br ALIGN="LEFT"/>prefix_match_field_name(prefix: str, limit: int): List[Tuple[str, str]]<br ALIGN="LEFT"/>prefix_match_label(prefix: str, limit: int): List[Tuple[str, str]]<br ALIGN="LEFT"/>update_statistics(): None<br ALIGN="LEFT"/>validate(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.odoo_migrate_export.OdooMigrateExportService" [color="black", fontcolor="black", label=<{OdooMigrateExportService|db<br ALIGN="LEFT"/>transform_service : TransformService<br ALIGN="LEFT"/>|export_dataset(dataset_id: int): bytes<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.module_registry.OdooModuleRegistry" [color="black", fontcolor="black", label=<{OdooModuleRegistry|MODULE_GROUPS : list<br ALIGN="LEFT"/>|filter_models_by_selection(all_models: Set[str], selected_groups: List[str]): Set[str]<br ALIGN="LEFT"/>get_all_groups(): List[ModuleGroup]<br ALIGN="LEFT"/>get_group(name: str): ModuleGroup<br ALIGN="LEFT"/>get_models_for_domain(domain: str): Set[str]<br ALIGN="LEFT"/>get_models_for_groups(group_names: List[str]): Set[str]<br ALIGN="LEFT"/>suggest_groups_for_columns(column_names: List[str]): List[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.operation_tracker.Operation" [color="black", fontcolor="black", label=<{Operation|created_at<br ALIGN="LEFT"/>current_step<br ALIGN="LEFT"/>dataset_id<br ALIGN="LEFT"/>error<br ALIGN="LEFT"/>id<br ALIGN="LEFT"/>operation_type<br ALIGN="LEFT"/>progress<br ALIGN="LEFT"/>result<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>steps<br ALIGN="LEFT"/>updated_at<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"services.operation_tracker.OperationTracker" [color="black", fontcolor="black", label=<{OperationTracker|db<br ALIGN="LEFT"/>operation_id : str<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>complete(result: Optional[Dict])<br ALIGN="LEFT"/>create(operation_type: str, steps: List[Dict], dataset_id: Optional[int]): 'OperationTracker'<br ALIGN="LEFT"/>error(error_message: str, step_id: Optional[str])<br ALIGN="LEFT"/>get(operation_id: str): Optional['OperationTracker']<br ALIGN="LEFT"/>get_status(): Dict<br ALIGN="LEFT"/>set_progress(progress: float)<br ALIGN="LEFT"/>update_step(step_id: str, status: str, detail: Optional[str])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.strategies.pattern_match.PatternMatchStrategy" [color="black", fontcolor="black", label=<{PatternMatchStrategy|PATTERN_TO_FIELDS : Dict[str, List[str]]<br ALIGN="LEFT"/>PATTERN_TO_TYPES : Dict[str, List[str]]<br ALIGN="LEFT"/>min_pattern_ratio : float<br ALIGN="LEFT"/>weight : float<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.PerformanceMetrics" [color="black", fontcolor="black", label=<{PerformanceMetrics|duration_ms : float<br ALIGN="LEFT"/>memory_mb : float<br ALIGN="LEFT"/>metadata : Dict[str, Any]<br ALIGN="LEFT"/>operation : str<br ALIGN="LEFT"/>timestamp : datetime<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.core.data_structures.RelationDefinition" [color="black", fontcolor="black", label=<{RelationDefinition|model : str<br ALIGN="LEFT"/>module : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>source_field : Optional[str]<br ALIGN="LEFT"/>target_field : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.loaders.excel_loaders.RelationLoader" [color="black", fontcolor="black", label=<{RelationLoader|file_path : Path<br ALIGN="LEFT"/>|load(): List[RelationDefinition]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.loaders.excel_loaders.SelectionLoader" [color="black", fontcolor="black", label=<{SelectionLoader|file_path : Path<br ALIGN="LEFT"/>|load(): List[SelectionOption]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.SelectionOption" [color="black", fontcolor="black", label=<{SelectionOption|field : str<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>sequence : int<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.matching.strategies.selection_value_match.SelectionValueMatchStrategy" [color="black", fontcolor="black", label=<{SelectionValueMatchStrategy|min_match_ratio : float<br ALIGN="LEFT"/>weight : float<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"core.config.Settings" [color="black", fontcolor="black", label=<{Settings|ACCESS_TOKEN_EXPIRE_MINUTES : int<br ALIGN="LEFT"/>ALGORITHM : str<br ALIGN="LEFT"/>ANTHROPIC_API_KEY : str \| None<br ALIGN="LEFT"/>API_V1_PREFIX : str<br ALIGN="LEFT"/>BACKEND_CORS_ORIGINS : List[str]<br ALIGN="LEFT"/>DATABASE_URL : str<br ALIGN="LEFT"/>DEBUG : bool<br ALIGN="LEFT"/>ENVIRONMENT : str<br ALIGN="LEFT"/>ODOO_DB : str \| None<br ALIGN="LEFT"/>ODOO_DICTIONARY_PATH : str<br ALIGN="LEFT"/>ODOO_PASSWORD : str \| None<br ALIGN="LEFT"/>ODOO_URL : str \| None<br ALIGN="LEFT"/>ODOO_USERNAME : str \| None<br ALIGN="LEFT"/>PROJECT_NAME : str<br ALIGN="LEFT"/>REDIS_URL : str<br ALIGN="LEFT"/>SECRET_KEY : str<br ALIGN="LEFT"/>STORAGE_PATH : str<br ALIGN="LEFT"/>VERSION : str<br ALIGN="LEFT"/>model_config : SettingsConfigDict<br ALIGN="LEFT"/>|assemble_cors_origins(v: str \| List[str]): List[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.strategies.statistical_similarity.StatisticalSimilarityStrategy" [color="black", fontcolor="black", label=<{StatisticalSimilarityStrategy|weight : float<br ALIGN="LEFT"/>|match(context: MatchingContext): List[FieldMapping]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"core.transformer.TransformRegistry" [color="black", fontcolor="black", label=<{TransformRegistry|transforms : Dict[str, Callable]<br ALIGN="LEFT"/>|concat(): str<br ALIGN="LEFT"/>currency_to_float(value: Any, currency_symbol: str): float<br ALIGN="LEFT"/>email_normalize(value: Any): str<br ALIGN="LEFT"/>get(name: str): Callable<br ALIGN="LEFT"/>lower(value: Any): str<br ALIGN="LEFT"/>phone_normalize(value: Any, region: str): str<br ALIGN="LEFT"/>regex_extract(value: Any, pattern: str, group: int): str<br ALIGN="LEFT"/>split_name(value: Any): Dict[str, str]<br ALIGN="LEFT"/>titlecase(value: Any): str<br ALIGN="LEFT"/>trim(value: Any): str<br ALIGN="LEFT"/>upper(value: Any): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"services.transform_service.TransformService" [color="black", fontcolor="black", label=<{TransformService|AVAILABLE_TRANSFORMS : dict<br ALIGN="LEFT"/>|apply_transform(value: Any, fn: str, params: Optional[dict]): Any<br ALIGN="LEFT"/>apply_transforms(value: Any, transforms: list): Any<br ALIGN="LEFT"/>get_available_transforms()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.core.data_structures.ValidationResult" [color="black", fontcolor="black", label=<{ValidationResult|errors : List[str]<br ALIGN="LEFT"/>is_valid : bool<br ALIGN="LEFT"/>suggested_transformations : List[DataTransformation]<br ALIGN="LEFT"/>warnings : List[str]<br ALIGN="LEFT"/>|add_error(error: str)<br ALIGN="LEFT"/>add_warning(warning: str)<br ALIGN="LEFT"/>has_errors(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"field_mapper.matching.cell_data_analyzer.ValueAnalysis" [color="black", fontcolor="black", label=<{ValueAnalysis|confidence : float<br ALIGN="LEFT"/>entity_type : Optional[str]<br ALIGN="LEFT"/>field_hints : Optional[List[str]]<br ALIGN="LEFT"/>metadata : Optional[Dict[str, Any]]<br ALIGN="LEFT"/>reference_type : Optional[str]<br ALIGN="LEFT"/>value_category : Optional[str]<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"field_mapper.matching.strategies.contextual_match.ContextualMatchStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.data_type_compatibility.DataTypeCompatibilityStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.exact_name_match.ExactNameMatchStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.fuzzy_match.FuzzyMatchStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.label_match.LabelMatchStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.pattern_match.PatternMatchStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.selection_value_match.SelectionValueMatchStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.matching.strategies.statistical_similarity.StatisticalSimilarityStrategy" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="empty", arrowtail="none"];
"field_mapper.main.DeterministicFieldMapper" -> "field_mapper.config.settings.FieldMapperSettings" [arrowhead="vee", arrowtail="none", fontcolor="green", label="settings", style="solid"];
"field_mapper.matching.matching_pipeline.MatchingPipeline" -> "field_mapper.config.settings.FieldMapperSettings" [arrowhead="vee", arrowtail="none", fontcolor="green", label="settings", style="solid"];
"field_mapper.matching.matching_context.MatchingContext" -> "field_mapper.core.data_structures.ColumnProfile" [arrowhead="vee", arrowtail="none", fontcolor="green", label="column_profile", style="solid"];
"field_mapper.core.knowledge_base.OdooKnowledgeBase" -> "field_mapper.core.data_structures.FieldDefinition" [arrowhead="vee", arrowtail="none", fontcolor="green", label="fields", style="solid"];
"field_mapper.core.data_structures.FieldMapping" -> "field_mapper.core.data_structures.MappingStatus" [arrowhead="vee", arrowtail="none", fontcolor="green", label="status", style="solid"];
"field_mapper.core.knowledge_base.OdooKnowledgeBase" -> "field_mapper.core.data_structures.ModelDefinition" [arrowhead="vee", arrowtail="none", fontcolor="green", label="models", style="solid"];
"field_mapper.matching.matching_context.MatchingContext" -> "field_mapper.core.knowledge_base.OdooKnowledgeBase" [arrowhead="vee", arrowtail="none", fontcolor="green", label="knowledge_base", style="solid"];
"field_mapper.matching.matching_pipeline.MatchingPipeline" -> "field_mapper.matching.base_strategy.BaseStrategy" [arrowhead="vee", arrowtail="none", fontcolor="green", label="strategies", style="solid"];
"field_mapper.core.knowledge_base.OdooKnowledgeBase" -> "field_mapper.main.DeterministicFieldMapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="knowledge_base", style="solid"];
"field_mapper.matching.business_context_analyzer.BusinessContextAnalyzer" -> "field_mapper.matching.matching_pipeline.MatchingPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="business_analyzer", style="solid"];
"field_mapper.matching.cell_data_analyzer.CellDataAnalyzer" -> "field_mapper.matching.matching_pipeline.MatchingPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cell_analyzer", style="solid"];
"field_mapper.matching.compound_name_parser.CompoundNameParser" -> "field_mapper.matching.strategies.exact_name_match.ExactNameMatchStrategy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"field_mapper.matching.matching_pipeline.MatchingPipeline" -> "field_mapper.main.DeterministicFieldMapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pipeline", style="solid"];
"field_mapper.profiling.column_profiler.ColumnProfiler" -> "field_mapper.main.DeterministicFieldMapper" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="profiler", style="solid"];
"field_mapper.core.knowledge_base.OdooKnowledgeBase" -> "field_mapper.executor.mapping_executor.MappingExecutor" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="knowledge_base", style="solid"];
"field_mapper.core.knowledge_base.OdooKnowledgeBase" -> "field_mapper.matching.matching_pipeline.MatchingPipeline" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="knowledge_base", style="solid"];
}
